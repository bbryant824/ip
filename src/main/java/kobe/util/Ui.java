package kobe.util;

import kobe.task.TaskList;

import java.util.Scanner;

/**
 * Handles the user interface for the Kobe chatbot application.
 * The Ui class is responsible for displaying messages to the user and reading user input.
 */
public class Ui {
    /** Scanner to read user input from the command line. */
    private final Scanner scanner;

    /** Stores the latest response to be displayed in the GUI. */
    private String latestResponse;

    /**
     * Constructs a Ui object and initializes the scanner for reading user input.
     */
    public Ui() {
        scanner = new Scanner(System.in);
        latestResponse = "";  // Initialize with an empty response
    }

    /**
     * Returns the welcome message.
     *
     * @return The welcome message.
     */
    public String getWelcomeMessage() {
        String logo =
                " K   K   OOO   BBBB   EEEE  \n" +
                        " K  K   O   O  B   B  E     \n" +
                        " KKK    O   O  BBBB   EEEE  \n" +
                        " K  K   O   O  B   B  E     \n" +
                        " K   K   OOO   BBBB   EEEE  \n";


        return "____________________________________________________________\n" +
                "Greetings from Kobe Bryant. \n" + logo +
                "How can I help you, my man?\n" +
                "____________________________________________________________";
    }


    /**
     * Displays the welcome message when the application starts.
     */
    public void showWelcome() {
        latestResponse = "Greetings from Kobe Bryant. How can I help you, my man?";
        System.out.println(latestResponse);
    }

    /**
     * Reads the user's command input.
     *
     * @return The user's input as a String.
     */
    public String readCommand() {
        return scanner.nextLine();
    }

    /**
     * Displays a horizontal line as a visual separator in the output.
     */
    public void showLine() {
        System.out.println("____________________________________________________________");
    }

    /**
     * Displays an error message indicating that there was an error loading the task list.
     */
    public void showLoadingError() {
        latestResponse = "OOPS!!! There was an error loading your task list.";
        System.out.println(latestResponse);
    }

    /**
     * Displays an error message.
     *
     * @param message The error message to be displayed.
     */
    public void showError(String message) {
        latestResponse = message;
        System.out.println(message);
    }

    /**
     * Displays the goodbye message when the application is exiting.
     */
    public void showGoodbye() {
        latestResponse = "Goodbye! My man.";
        System.out.println(latestResponse);
    }

    /**
     * Displays all tasks in the task list to the user.
     *
     * @param tasks The TaskList object containing all tasks.
     */
    public void showTasks(TaskList tasks) {
        if (tasks.isEmpty()) {
            latestResponse = "Your task list is currently empty.";
        } else {
            StringBuilder sb = new StringBuilder("Here are the tasks in your list:\n");
            for (int i = 0; i < tasks.size(); i++) {
                sb.append(i + 1).append(".").append(tasks.getTask(i)).append("\n");
            }
            latestResponse = sb.toString();
        }
        System.out.println(latestResponse);
    }

    /**
     * Displays the tasks that match the search criteria.
     *
     * @param tasks The TaskList containing the matched tasks.
     */
    public void showFindResults(TaskList tasks) {
        if (tasks.isEmpty()) {
            latestResponse = "No matching tasks found.";
        } else {
            StringBuilder sb = new StringBuilder("Here are the matching tasks in your list:\n");
            for (int i = 0; i < tasks.size(); i++) {
                sb.append(i + 1).append(".").append(tasks.getTask(i)).append("\n");
            }
            latestResponse = sb.toString();
        }
        System.out.println(latestResponse);
    }

    /**
     * Gets the latest response generated by the Ui.
     *
     * @return The latest response.
     */
    public String getLatestResponse() {
        return latestResponse;
    }
}
